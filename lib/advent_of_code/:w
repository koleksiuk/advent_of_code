defmodule AdventOfCode.Day01 do
  def solve_task(file_path \\ "priv/files/day_01/input") do
    file_path
    |> File.read!
    |> solve
  end

  def solve(""), do: 0
  def solve(input), do: find_floor(input, { 0, 0 })

  def find_basement(input), do: find_floor(input, { 0, 0 }, -1)

  defp find_floor("", { _current_step, current_floor }, _break_on), do: current_floor
  defp find_floor(input, { previous_step_count, current_floor }, break_on \\) do
    { next_step, left_steps } = String.next_codepoint(input)

    direction = find_direction(next_step)

    find_floor(left_steps, { previous_step_count + 1, current_floor + direction })
  end


  defp find_direction("("), do: 1
  defp find_direction(")"), do: -1
  defp find_direction(_),   do: 0
end
